# docker-compose.prod.yml

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    env_file:
      - .env.prod
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8001:8000" # Используем порт 8001, чтобы не конфликтовать с dev (8002)

  db:
    image: postgres:16-alpine
    restart: unless-stopped
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    env_file:
      - .env.prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    ports:
      - "5433:5432" # Используем порт 5433, чтобы не конфликтовать с dev (5432)

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_data_prod:/data
    env_file:
      - .env.prod
    command: redis-server --save 60 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres_data_prod:
  redis_data_prod: