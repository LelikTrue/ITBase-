#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from sqlalchemy.orm import Session
from app.db.database import SessionLocal, engine
from app.models import (
    AssetType, DeviceModel, DeviceStatus, Manufacturer, 
    Department, Location, Employee, Base
)

def create_tables():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
    Base.metadata.create_all(bind=engine)
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")

def init_asset_types(db: Session):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–æ–≤"""
    print("üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–æ–≤...")
    
    asset_types = [
        {"name": "–ö–æ–º–ø—å—é—Ç–µ—Ä", "description": "–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏ –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–ºÔøΩÔøΩ—å—é—Ç–µ—Ä—ã"},
        {"name": "–ú–æ–Ω–∏—Ç–æ—Ä", "description": "–ú–æ–Ω–∏—Ç–æ—Ä—ã –∏ –¥–∏—Å–ø–ª–µ–∏"},
        {"name": "–ü—Ä–∏–Ω—Ç–µ—Ä", "description": "–ü—Ä–∏–Ω—Ç–µ—Ä—ã –∏ –ú–§–£"},
        {"name": "–°–µ—Ç–µ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "description": "–†–æ—É—Ç–µ—Ä—ã, –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä—ã, —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞"},
        {"name": "–°–µ—Ä–≤–µ—Ä", "description": "–°–µ—Ä–≤–µ—Ä–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"},
        {"name": "–ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "description": "–¢–µ–ª–µ—Ñ–æ–Ω—ã, –ø–ª–∞–Ω—à–µ—Ç—ã"},
        {"name": "–ü–µ—Ä–∏—Ñ–µ—Ä–∏—è", "description": "–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –º—ã—à–∏, –≤–µ–±-–∫–∞–º–µ—Ä—ã"},
        {"name": "–ê—É–¥–∏–æ/–í–∏–¥–µ–æ", "description": "–ö–æ–ª–æ–Ω–∫–∏, –Ω–∞—É—à–Ω–∏–∫–∏, –ø—Ä–æ–µ–∫—Ç–æ—Ä—ã"},
    ]
    
    for asset_type_data in asset_types:
        existing = db.query(AssetType).filter(AssetType.name == asset_type_data["name"]).first()
        if not existing:
            asset_type = AssetType(**asset_type_data)
            db.add(asset_type)
    
    db.commit()
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(asset_types)} —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–æ–≤")

def init_manufacturers(db: Session):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    print("üè≠ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π...")
    
    manufacturers = [
        {"name": "Dell", "description": "Dell Technologies"},
        {"name": "HP", "description": "Hewlett-Packard"},
        {"name": "Lenovo", "description": "Lenovo Group"},
        {"name": "ASUS", "description": "ASUSTeK Computer"},
        {"name": "Acer", "description": "Acer Inc."},
        {"name": "Apple", "description": "Apple Inc."},
        {"name": "Samsung", "description": "Samsung Electronics"},
        {"name": "LG", "description": "LG Electronics"},
        {"name": "Canon", "description": "Canon Inc."},
        {"name": "Epson", "description": "Seiko Epson"},
        {"name": "Cisco", "description": "Cisco Systems"},
        {"name": "D-Link", "description": "D-Link Corporation"},
        {"name": "TP-Link", "description": "TP-Link Technologies"},
        {"name": "Logitech", "description": "Logitech International"},
        {"name": "Microsoft", "description": "Microsoft Corporation"},
    ]
    
    for manufacturer_data in manufacturers:
        existing = db.query(Manufacturer).filter(Manufacturer.name == manufacturer_data["name"]).first()
        if not existing:
            manufacturer = Manufacturer(**manufacturer_data)
            db.add(manufacturer)
    
    db.commit()
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(manufacturers)} –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π")

def init_device_statuses(db: Session):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    print("üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
    
    statuses = [
        {"name": "–ê–∫—Ç–∏–≤–µ–Ω", "description": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"},
        {"name": "–í —Ä–µ–∑–µ—Ä–≤–µ", "description": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"},
        {"name": "–ù–∞ —Ä–µ–º–æ–Ω—Ç–µ", "description": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–º–æ–Ω—Ç–µ"},
        {"name": "–°–ø–∏—Å–∞–Ω", "description": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–ø–∏—Å–∞–Ω–æ"},
        {"name": "–£—Ç–µ—Ä—è–Ω", "description": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Ç–µ—Ä—è–Ω–æ"},
        {"name": "–£–∫—Ä–∞–¥–µ–Ω", "description": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∫—Ä–∞–¥–µ–Ω–æ"},
        {"name": "–ù–∞ —Å–∫–ª–∞–¥–µ", "description": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ"},
        {"name": "–ü–µ—Ä–µ–¥–∞–Ω", "description": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –¥—Ä—É–≥–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"},
    ]
    
    for status_data in statuses:
        existing = db.query(DeviceStatus).filter(DeviceStatus.name == status_data["name"]).first()
        if not existing:
            status = DeviceStatus(**status_data)
            db.add(status)
    
    db.commit()
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(statuses)} —Å—Ç–∞—Ç—É—Å–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")

def init_departments(db: Session):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–¥–µ–ª–æ–≤"""
    print("üè¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–≤...")
    
    departments = [
        {"name": "–ò–¢ –æ—Ç–¥–µ–ª", "description": "–û—Ç–¥–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"},
        {"name": "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è", "description": "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π –æ—Ç–¥–µ–ª"},
        {"name": "–û—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤", "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º"},
        {"name": "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª", "description": "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è —Å–ª—É–∂–±–∞"},
        {"name": "–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂", "description": "–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞"},
        {"name": "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "description": "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª"},
        {"name": "–°–∫–ª–∞–¥", "description": "–°–∫–ª–∞–¥—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ"},
        {"name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è", "description": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–¥–µ–ª"},
        {"name": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "description": "–°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"},
        {"name": "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "description": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"},
    ]
    
    for department_data in departments:
        existing = db.query(Department).filter(Department.name == department_data["name"]).first()
        if not existing:
            department = Department(**department_data)
            db.add(department)
    
    db.commit()
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(departments)} –æ—Ç–¥–µ–ª–æ–≤")

def init_locations(db: Session):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π"""
    print("üìç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π...")
    
    locations = [
        {"name": "–û—Ñ–∏—Å 1 —ç—Ç–∞–∂", "description": "–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂ –≥–ª–∞–≤–Ω–æ–≥–æ –æ—Ñ–∏—Å–∞"},
        {"name": "–û—Ñ–∏—Å 2 —ç—Ç–∞–∂", "description": "–í—Ç–æ—Ä–æ–π —ç—Ç–∞–∂ –≥–ª–∞–≤–Ω–æ–≥–æ –æ—Ñ–∏—Å–∞"},
        {"name": "–û—Ñ–∏—Å 3 —ç—Ç–∞–∂", "description": "–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–∂ –≥–ª–∞–≤–Ω–æ–≥–æ –æ—Ñ–∏—Å–∞"},
        {"name": "–°–µ—Ä–≤–µ—Ä–Ω–∞—è", "description": "–°–µ—Ä–≤–µ—Ä–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞"},
        {"name": "–°–∫–ª–∞–¥", "description": "–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥"},
        {"name": "–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è 1", "description": "–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ ‚Ññ1"},
        {"name": "–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è 2", "description": "–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ ‚Ññ2"},
        {"name": "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª", "description": "–ë–æ–ª—å—à–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª"},
        {"name": "–ü—Ä–∏–µ–º–Ω–∞—è", "description": "–ü—Ä–∏–µ–º–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞"},
        {"name": "–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "description": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–¥–∞–ª–µ–Ω–Ω–æ"},
    ]
    
    for location_data in locations:
        existing = db.query(Location).filter(Location.name == location_data["name"]).first()
        if not existing:
            location = Location(**location_data)
            db.add(location)
    
    db.commit()
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(locations)} –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π")

def init_employees(db: Session):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    print("üë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")
    
    employees = [
        {
            "first_name": "–ò–≤–∞–Ω",
            "last_name": "–ò–≤–∞–Ω–æ–≤",
            "patronymic": "–ò–≤–∞–Ω–æ–≤–∏—á",
            "employee_id": "EMP001",
            "email": "i.ivanov@company.com",
            "phone_number": "+7 (999) 123-45-67"
        },
        {
            "first_name": "–ü–µ—Ç—Ä",
            "last_name": "–ü–µ—Ç—Ä–æ–≤",
            "patronymic": "–ü–µ—Ç—Ä–æ–≤–∏—á",
            "employee_id": "EMP002",
            "email": "p.petrov@company.com",
            "phone_number": "+7 (999) 234-56-78"
        },
        {
            "first_name": "–ê–Ω–Ω–∞",
            "last_name": "–°–∏–¥–æ—Ä–æ–≤–∞",
            "patronymic": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞",
            "employee_id": "EMP003",
            "email": "a.sidorova@company.com",
            "phone_number": "+7 (999) 345-67-89"
        },
        {
            "first_name": "–ú–∏—Ö–∞–∏–ª",
            "last_name": "–ö–æ–∑–ª–æ–≤",
            "patronymic": "–°–µ—Ä–≥–µ–µ–≤–∏—á",
            "employee_id": "EMP004",
            "email": "m.kozlov@company.com",
            "phone_number": "+7 (999) 456-78-90"
        },
        {
            "first_name": "–ï–ª–µ–Ω–∞",
            "last_name": "–°–º–∏—Ä–Ω–æ–≤–∞",
            "patronymic": "–í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞",
            "employee_id": "EMP005",
            "email": "e.smirnova@company.com",
            "phone_number": "+7 (999) 567-89-01"
        },
    ]
    
    for employee_data in employees:
        existing = db.query(Employee).filter(Employee.employee_id == employee_data["employee_id"]).first()
        if not existing:
            employee = Employee(**employee_data)
            db.add(employee)
    
    db.commit()
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")

def init_device_models(db: Session):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    print("üíª –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–æ–≤ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
    computer_type = db.query(AssetType).filter(AssetType.name == "–ö–æ–º–ø—å—é—Ç–µ—Ä").first()
    monitor_type = db.query(AssetType).filter(AssetType.name == "–ú–æ–Ω–∏—Ç–æ—Ä").first()
    printer_type = db.query(AssetType).filter(AssetType.name == "–ü—Ä–∏–Ω—Ç–µ—Ä").first()
    
    dell = db.query(Manufacturer).filter(Manufacturer.name == "Dell").first()
    hp = db.query(Manufacturer).filter(Manufacturer.name == "HP").first()
    lenovo = db.query(Manufacturer).filter(Manufacturer.name == "Lenovo").first()
    
    if not all([computer_type, monitor_type, printer_type, dell, hp, lenovo]):
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∏–ø—ã –∞–∫—Ç–∏–≤–æ–≤ –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏")
        return
    
    device_models = [
        {
            "name": "OptiPlex 7090",
            "manufacturer_id": dell.id,
            "asset_type_id": computer_type.id,
            "description": "–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä Dell OptiPlex 7090",
            "specification": {"cpu": "Intel Core i5", "ram": "8GB", "storage": "256GB SSD"}
        },
        {
            "name": "ThinkPad T14",
            "manufacturer_id": lenovo.id,
            "asset_type_id": computer_type.id,
            "description": "–ù–æ—É—Ç–±—É–∫ Lenovo ThinkPad T14",
            "specification": {"cpu": "Intel Core i7", "ram": "16GB", "storage": "512GB SSD"}
        },
        {
            "name": "EliteBook 850",
            "manufacturer_id": hp.id,
            "asset_type_id": computer_type.id,
            "description": "–ù–æ—É—Ç–±—É–∫ HP EliteBook 850",
            "specification": {"cpu": "Intel Core i5", "ram": "8GB", "storage": "256GB SSD"}
        },
        {
            "name": "UltraSharp U2419H",
            "manufacturer_id": dell.id,
            "asset_type_id": monitor_type.id,
            "description": "–ú–æ–Ω–∏—Ç–æ—Ä Dell UltraSharp 24 –¥—é–π–º–∞",
            "specification": {"size": "24 inch", "resolution": "1920x1080", "type": "IPS"}
        },
        {
            "name": "LaserJet Pro M404n",
            "manufacturer_id": hp.id,
            "asset_type_id": printer_type.id,
            "description": "–õ–∞–∑–µ—Ä–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä HP LaserJet Pro",
            "specification": {"type": "Laser", "color": "Monochrome", "speed": "38 ppm"}
        },
    ]
    
    for model_data in device_models:
        existing = db.query(DeviceModel).filter(
            DeviceModel.name == model_data["name"],
            DeviceModel.manufacturer_id == model_data["manufacturer_id"]
        ).first()
        if not existing:
            device_model = DeviceModel(**model_data)
            db.add(device_model)
    
    db.commit()
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(device_models)} –º–æ–¥–µ–ª–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        create_tables()
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        db = SessionLocal()
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
            init_asset_types(db)
            init_manufacturers(db)
            init_device_statuses(db)
            init_departments(db)
            init_locations(db)
            init_employees(db)
            init_device_models(db)
            
            print("\n" + "=" * 50)
            print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("=" * 50)
            print("\nüìã –ß—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:")
            print("   ‚úÖ –¢–∏–ø—ã –∞–∫—Ç–∏–≤–æ–≤ (8 –∑–∞–ø–∏—Å–µ–π)")
            print("   ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ (15 –∑–∞–ø–∏—Å–µ–π)")
            print("   ‚úÖ –°—Ç–∞—Ç—É—Å—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (8 –∑–∞–ø–∏—Å–µ–π)")
            print("   ‚úÖ –û—Ç–¥–µ–ª—ã (10 –∑–∞–ø–∏—Å–µ–π)")
            print("   ‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (10 –∑–∞–ø–∏—Å–µ–π)")
            print("   ‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ (5 –∑–∞–ø–∏—Å–µ–π)")
            print("   ‚úÖ –ú–æ–¥–µ–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (5 –∑–∞–ø–∏—Å–µ–π)")
            print("\nüåê –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:")
            print("   - –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
            print("   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ '+' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤")
            print("   - –ó–∞–ø–æ–ª–Ω—è—Ç—å —Ñ–æ—Ä–º—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())