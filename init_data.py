# init_data.py
import asyncio

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
project_root = Path(__file__).resolve().parent
sys.path.insert(0, str(project_root))

from sqlalchemy import select
from sqlalchemy.dialects.postgresql import insert
from sqlalchemy.ext.asyncio import AsyncSession

from app.db import initial_data_storage
from app.db.database import AsyncSessionFactory, Base, async_engine
from app.models import (
    AssetType,
    Department,
    DeviceModel,
    DeviceStatus,
    Employee,
    Location,
    Manufacturer,
)


async def _seed_data(db: AsyncSession, model, data: list[dict], index_elements: list[str]):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü –¥–∞–Ω–Ω—ã–º–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç `INSERT ... ON CONFLICT DO NOTHING` –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    –Ω–∞ —É—Ä–æ–≤–Ω–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º—ã–º –±—ã—Å—Ç—Ä—ã–º —Å–ø–æ—Å–æ–±–æ–º.
    """
    if not data:
        print(f"‚úîÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ '{model.__tablename__}'.")
        return

    print(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è '{model.__tablename__}'...")
    stmt = insert(model).values(data)
    stmt = stmt.on_conflict_do_nothing(index_elements=index_elements)

    await db.execute(stmt)
    # result.rowcount –Ω–µ –≤—Å–µ–≥–¥–∞ –Ω–∞–¥–µ–∂–µ–Ω —Å on_conflict, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è '{model.__tablename__}'.")


async def create_tables():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    async with async_engine.begin() as conn:
        print('üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü...')
        await conn.run_sync(Base.metadata.drop_all)
        print('‚ú® –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü...')
        await conn.run_sync(Base.metadata.create_all)
    print('üëç –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.')

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö."""
    await create_tables()
    async with AsyncSessionFactory() as db:
        print('\n--- üèÅ –ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ ---')

        # --- –ü—Ä–æ—Å—Ç—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ ---
        await _seed_data(db, AssetType, initial_data_storage.ASSET_TYPES, index_elements=['name'])
        await _seed_data(db, Manufacturer, initial_data_storage.MANUFACTURERS, index_elements=['name'])
        await _seed_data(db, DeviceStatus, initial_data_storage.STATUSES, index_elements=['name'])
        await _seed_data(db, Department, initial_data_storage.DEPARTMENTS, index_elements=['name'])
        await _seed_data(db, Location, initial_data_storage.LOCATIONS, index_elements=['name'])
        await _seed_data(db, Employee, initial_data_storage.EMPLOYEES, index_elements=['employee_id'])

        # --- –°–ª–æ–∂–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ (DeviceModel) ---
        # –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ID —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ —Ç–∏–ø–æ–≤
        manufacturers = await db.execute(select(Manufacturer.id, Manufacturer.name))
        asset_types = await db.execute(select(AssetType.id, AssetType.name))

        manufacturers_map = {name: id for id, name in manufacturers}
        asset_types_map = {name: id for id, name in asset_types}

        device_models_data = initial_data_storage.get_device_models(manufacturers_map, asset_types_map)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–¥–µ–ª–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –Ω–∞—à–ª–∏—Å—å ID
        valid_device_models = [m for m in device_models_data if m['manufacturer_id'] and m['asset_type_id']]

        await _seed_data(db, DeviceModel, valid_device_models, index_elements=['name', 'manufacturer_id'])

        await db.commit()
        print('\n--- üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã! ---')

if __name__ == '__main__':
    asyncio.run(main())
