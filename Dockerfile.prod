# Dockerfile.prod

# =====================================================================
# Стадия 1: builder – Установка всех зависимостей
# =====================================================================
FROM python:3.12.3-slim-bookworm AS builder

# Устанавливаем системные переменные
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/opt/venv/bin:$PATH"

# Устанавливаем системные зависимости, необходимые для сборки python-пакетов
RUN apt-get update && apt-get install -y --no-install-recommends build-essential libpq-dev && rm -rf /var/lib/apt/lists/*

# Создаем виртуальное окружение
RUN python -m venv /opt/venv

# Копируем файлы зависимостей
COPY requirements/ ./requirements/

# Устанавливаем все зависимости одной командой с использованием кеша pip
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements/prod.txt


# =====================================================================
# Стадия 2: prod – Финальный, легковесный образ
# =====================================================================
FROM python:3.12.3-slim-bookworm AS prod

# Устанавливаем системные переменные
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/opt/venv/bin:$PATH"

# Устанавливаем только runtime-зависимости (libpq5 для psycopg, curl для healthcheck)
RUN apt-get update && apt-get install -y --no-install-recommends libpq5 curl && rm -rf /var/lib/apt/lists/*

# Копируем виртуальное окружение из стадии builder
COPY --from=builder /opt/venv /opt/venv

# Создаем непривилегированного пользователя для безопасности
RUN groupadd -r appuser && useradd -r -g appuser appuser

WORKDIR /app

# Копируем код приложения
COPY --chown=appuser:appuser app ./app
COPY --chown=appuser:appuser alembic ./alembic
COPY --chown=appuser:appuser alembic.ini .
COPY --chown=appuser:appuser openapi-assets.yaml .
COPY --chown=appuser:appuser static ./static

# Переключаемся на нашего пользователя
USER appuser

EXPOSE 8000

# Healthcheck, который теперь будет работать
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
  CMD curl -f http://localhost:8000/health || exit 1

# Команда для запуска сервера в продакшене через gunicorn
# Используем UvicornWorker, который автоматически подхватит uvloop
CMD ["gunicorn", "-k", "uvicorn.workers.UvicornWorker", "-w", "4", "-b", "0.0.0.0:8000", "app.main:app"]