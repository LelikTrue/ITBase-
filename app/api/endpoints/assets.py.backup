# app/api/endpoints/assets.py

from datetime import date, datetime
from typing import Optional

from fastapi import APIRouter, Depends, Request, HTTPException, Form, status
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session, joinedload
from sqlalchemy import select, func

from app.db.database import get_db
from app.models import Device, DeviceModel, AssetType, DeviceStatus, Department, Location, Employee

# Инициализация APIRouter
router = APIRouter()

# Инициализация Jinja2Templates
# Используем абсолютный путь
templates = Jinja2Templates(directory="/app/templates")

def _parse_form_data(
    inventory_number: str,
    serial_number: Optional[str],
    mac_address: Optional[str],
    ip_address: Optional[str],
    asset_type_id: str,
    device_model_id: str,
    status_id: str,
    department_id: Optional[str],
    location_id: Optional[str],
    employee_id: Optional[str],
    notes: Optional[str],
    source: str,
    purchase_date: Optional[str],
    warranty_end_date: Optional[str],
    price: Optional[str]
):
    """Парсит и валидирует данные из формы."""
    # Обработка числовых полей
    def to_int(value: Optional[str]) -> Optional[int]:
        return int(value) if value and value.strip() else None
        
    def to_float(value: Optional[str]) -> Optional[float]:
        return float(value) if value and value.strip() else None
    
    # Обработка дат
    def parse_date(date_str: Optional[str]) -> Optional[date]:
        if not date_str or not date_str.strip():
            return None
        try:
            return datetime.strptime(date_str, '%Y-%m-%d').date()
        except (ValueError, TypeError):
            return None
    
    return {
        'inventory_number': inventory_number.strip(),
        'serial_number': serial_number.strip() if serial_number else None,
        'mac_address': mac_address.strip() if mac_address else None,
        'ip_address': ip_address.strip() if ip_address else None,
        'asset_type_id': int(asset_type_id),
        'device_model_id': int(device_model_id),
        'status_id': int(status_id),
        'department_id': to_int(department_id),
        'location_id': to_int(location_id),
        'employee_id': to_int(employee_id),
        'notes': notes.strip() if notes else None,
        'source': source.strip(),
        'purchase_date': parse_date(purchase_date),
        'warranty_end_date': parse_date(warranty_end_date),
        'price': to_float(price)
    }

@router.post("/create", name="create_asset")
async def create_asset(
    request: Request,
    inventory_number: str = Form(...),
    serial_number: Optional[str] = Form(None),
    mac_address: Optional[str] = Form(None),
    ip_address: Optional[str] = Form(None),
    asset_type_id: str = Form(...),
    device_model_id: str = Form(...),
    status_id: str = Form(...),
    department_id: Optional[str] = Form(None),
    location_id: Optional[str] = Form(None),
    employee_id: Optional[str] = Form(None),
    notes: Optional[str] = Form(None),
    source: str = Form(...),
    purchase_date: Optional[str] = Form(None),
    warranty_end_date: Optional[str] = Form(None),
    price: Optional[str] = Form(None),
    db: Session = Depends(get_db)
):
    """
    Обрабатывает форму создания нового актива.
    """
    try:
        # Парсим и валидируем данные
        form_data = _parse_form_data(
            inventory_number=inventory_number,
            serial_number=serial_number,
            mac_address=mac_address,
            ip_address=ip_address,
            asset_type_id=asset_type_id,
            device_model_id=device_model_id,
            status_id=status_id,
            department_id=department_id,
            location_id=location_id,
            employee_id=employee_id,
            notes=notes,
            source=source,
            purchase_date=purchase_date,
            warranty_end_date=warranty_end_date,
            price=price
        )
        
        # Создаем новое устройство
        device = Device(
            **form_data,
            added_at=datetime.now(),
            updated_at=datetime.now()
        )
        
        db.add(device)
        db.commit()
        db.refresh(device)
        
        # Устанавливаем сообщение об успехе
        request.session["message"] = {"type": "success", "text": "Актив успешно добавлен!"}
        
        # Перенаправляем на дашборд
        return RedirectResponse(
            url=request.url_for("read_assets"),
            status_code=status.HTTP_303_SEE_OTHER
        )
        
    except Exception as e:
        db.rollback()
        # Устанавливаем сообщение об ошибке
        request.session["message"] = {"type": "danger", "text": f"Ошибка при добавлении актива: {str(e)}"}
        
        # Возвращаем обратно на форму с сохраненными данными
        return RedirectResponse(
            url=request.url_for("add_asset_form"),
            status_code=status.HTTP_303_SEE_OTHER
        )
