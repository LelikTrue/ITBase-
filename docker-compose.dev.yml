# docker-compose.dev.yml

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    container_name: itbase-dev
    restart: unless-stopped
    env_file: .env
    ports: 
      - "8002:8000" 
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
    networks:
      - itbase-network

  db:
    image: postgres:15-alpine
    container_name: itbase-db
    restart: unless-stopped
    env_file: .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - itbase-network

  redis:
    image: redis:7-alpine
    container_name: itbase-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    # ports: <-- УБИРАЕМ ПРОБРОС ПОРТОВ
    #   - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - itbase-network

# --- СЕРВИС PGADMIN ПОЛНОСТЬЮ УДАЛЕН ---

networks:
  itbase-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  # pgadmin_data: <-- ТАКЖЕ УДАЛЯЕМ ЕГО ТОМ