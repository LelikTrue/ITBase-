[tool.black]
line-length = 88
target-version = ["py312"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
line_length = 88
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
line-length = 88
target-version = "py312"
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "FBT", # flake8-boolean-trap
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PTH", # flake8-use-pathlib
    "RUF", # Ruff-specific rules
    "A",   # flake8-builtins
    "ARG", # flake8-unused-arguments
    "B904", # flake8-bugbear raise-without-from-inside-except
    "C90",  # mccabe complexity
    "DTZ",  # flake8-datetimez
    "EM",   # flake8-errmsg
    "EXE",  # flake8-executable
    "FA",   # flake8-future-annotations
    "FIX",  # flake8-fixme
    "FLY",  # flynt
    "I001", # isort
    "ICN",  # flake8-import-conventions
    "INP",  # flake8-no-pep420
    "ISC",  # flake8-implicit-str-concat
    "N",    # pep8-naming
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PL",   # pylint
    "PT",   # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "RUF",  # Ruff-specific
    "S",    # flake8-bandit
    "SIM",  # flake8-simplify
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "TCH",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
    "UP",   # pyupgrade
    "W",    # pycodestyle warnings
    "YTT",  # flake8-2020
]
ignore = [
    "D203",  # One blank line required before class docstring (conflicts with D211)
    "D212",  # Multi-line docstring summary should start at the first line (conflicts with D213)
    "E203",  # Whitespace before ':' (conflicts with black)
    "W503",  # Line break occurred before binary operator (conflicts with black)
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]  # Allow assert in tests
"**/migrations/*" = ["E501"]  # Ignore line length in migrations

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
pretty = true
show_error_context = true
show_column_numbers = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_untyped_decorators = false

[tool.bandit]
# Bandit configuration
exclude_dirs = ["venv", ".git", "__pycache__", "*.egg-info"]
skips = ["B101"]  # Skip assert_used

[tool.coverage.run]
source = ["app"]
omit = [
    "**/tests/**",
    "**/migrations/**",
    "**/__init__.py",
    "**/admin.py",
    "**/apps.py",
    "**/asgi.py",
    "**/wsgi.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"
addopts = "-v --cov=app --cov-report=term-missing --cov-report=xml --cov-fail-under=80 -n auto"
asyncio_mode = "auto"

[tool.ruff.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.flake8-bugbear]
extend-immutable-calls = ["pydantic.BaseModel"]
