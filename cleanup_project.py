#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤
"""
import os
import sys
import shutil
from pathlib import Path

def confirm_action(message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"""
    while True:
        response = input(f"{message} (y/n): ").lower().strip()
        if response in ['y', 'yes', '–¥–∞']:
            return True
        elif response in ['n', 'no', '–Ω–µ—Ç']:
            return False
        else:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 'y' –∏–ª–∏ 'n'")

def safe_remove(path, description=""):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É"""
    try:
        if path.exists():
            if path.is_file():
                path.unlink()
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {path.name} {description}")
            elif path.is_dir():
                shutil.rmtree(path)
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {path.name} {description}")
            return True
        else:
            print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path.name}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {path.name}: {e}")
        return False

def cleanup_root_directory():
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...")
    
    root_path = Path("../")
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ bat-—Ñ–∞–π–ª—ã
    temp_files = [
        "temp_alembic_current.bat",
        "temp_create_migration.bat", 
        "temp_delete_migrations.bat",
        "temp_downgrade.bat",
        "temp_final_upgrade.bat",
        "temp_git_log.bat",
        "temp_migration_history.bat",
        "temp_migration_with_env.bat",
        "temp_migration.bat",
        "temp_run_app.bat",
        "temp_stamp_head.bat",
        "temp_upgrade.bat"
    ]
    
    removed_count = 0
    for file_name in temp_files:
        file_path = root_path / file_name
        if safe_remove(file_path, "(–≤—Ä–µ–º–µ–Ω–Ω—ã–π bat-—Ñ–∞–π–ª)"):
            removed_count += 1
    
    # –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–∫ÔøΩÔøΩ–∏–ø—Ç—ã
    old_scripts = [
        "clean_db.py",
        "it_asset_db.session.sql"
    ]
    
    for file_name in old_scripts:
        file_path = root_path / file_name
        if safe_remove(file_path, "(—É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Å–∫—Ä–∏–ø—Ç)"):
            removed_count += 1
    
    # IDE –ø–∞–ø–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    ide_folders = [".qodo", ".vscode"]
    for folder_name in ide_folders:
        folder_path = root_path / folder_name
        if folder_path.exists():
            if confirm_action(f"–£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É {folder_name} (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ IDE)?"):
                if safe_remove(folder_path, "(–ø–∞–ø–∫–∞ IDE)"):
                    removed_count += 1
    
    print(f"üìä –ò–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É–¥–∞–ª–µ–Ω–æ: {removed_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

def cleanup_project_directory():
    """–û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞...")
    
    # –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    old_docs = [
        "issue_summary.md",
        "update_main_instructions.txt", 
        "demo_data.sql",
        "schema.sql"
    ]
    
    removed_count = 0
    for file_name in old_docs:
        file_path = Path(file_name)
        if safe_remove(file_path, "(—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –¥–æ–∫—É–º–µ–Ω—Ç)"):
            removed_count += 1
    
    # –î—É–±–ª–∏—Ä—É—é—â–∏–µ —Ñ–∞–π–ª—ã
    duplicate_files = [
        "requirements.txt",
        "setup.py",
        "setup.cfg"
    ]
    
    for file_name in duplicate_files:
        file_path = Path(file_name)
        if safe_remove(file_path, "(–¥—É–±–ª–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª)"):
            removed_count += 1
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    dev_files = [
        "save_state.py",
        "CURRENT_STATE.md", 
        "DEVELOPMENT_REPORT.md",
        "PROBLEM_SOLUTION.md"
    ]
    
    if confirm_action("–£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏? (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏)"):
        for file_name in dev_files:
            file_path = Path(file_name)
            if safe_remove(file_path, "(–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"):
                removed_count += 1
    
    print(f"üìä –ò–∑ –ø—Ä–æ–µ–∫—Ç–∞ —É–¥–∞–ª–µ–Ω–æ: {removed_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

def update_gitignore():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç .gitignore"""
    print("\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .gitignore...")
    
    gitignore_path = Path(".gitignore")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    new_rules = [
        "",
        "# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
        "temp_*.bat",
        "*.session.sql",
        "clean_db.py",
        "",
        "# –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
        "CURRENT_STATE.md",
        "DEVELOPMENT_REPORT.md", 
        "PROBLEM_SOLUTION.md",
        "save_state.py",
        "cleanup_project.py",
        "CLEANUP_REPORT.md",
        "",
        "# IDE —Ñ–∞–π–ª—ã",
        ".qodo/",
        ".vscode/",
        "*.code-workspace"
    ]
    
    try:
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .gitignore
        existing_content = ""
        if gitignore_path.exists():
            existing_content = gitignore_path.read_text(encoding='utf-8')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞
        if "# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏" not in existing_content:
            with open(gitignore_path, 'a', encoding='utf-8') as f:
                f.write('\n'.join(new_rules))
            print("‚úÖ .gitignore –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            print("‚ö†Ô∏è  .gitignore —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ .gitignore: {e}")

def show_final_structure():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\nüìÅ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
    
    important_items = [
        "app/",
        "templates/", 
        "static/",
        "alembic/",
        "tests/",
        "requirements/",
        ".env.example",
        ".gitignore",
        "alembic.ini",
        "pyproject.toml",
        "README.md",
        "README.dev.md",
        "run_dev.py",
        "setup_dev.py", 
        "init_data.py",
        "Makefile.dev"
    ]
    
    existing_count = 0
    for item in important_items:
        item_path = Path(item)
        if item_path.exists():
            status = "‚úÖ"
            existing_count += 1
        else:
            status = "‚ùå"
        print(f"  {status} {item}")
    
    print(f"\nüìä –í–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {existing_count}/{len(important_items)}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ ITBase")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ªÔøΩÔøΩ–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path("app").exists() or not Path("run_dev.py").exists():
        print("‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ ITBase")
        return 1
    
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–∏—Ç –ª–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞!")
    print("üìã –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:")
    print("   - –í—Ä–µ–º–µ–Ω–Ω—ã–µ bat-—Ñ–∞–π–ª—ã")
    print("   - –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
    print("   - –î—É–±–ª–∏—Ä—É—é—â–∏–µ —Ñ–∞–π–ª—ã")
    print("   - –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ IDE –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    if not confirm_action("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—á–∏—Å—Ç–∫—É?"):
        print("üõë –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return 0
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
    cleanup_root_directory()
    cleanup_project_directory()
    update_gitignore()
    
    print("\n" + "=" * 50)
    print("üéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("=" * 50)
    
    show_final_structure()
    
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è: python run_dev.py")
    print("   2. –°–¥–µ–ª–∞–π—Ç–µ –∫–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π: git add . && git commit -m 'cleanup: —É–¥–∞–ª–µ–Ω—ã –ª–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã'")
    print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .gitignore –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())