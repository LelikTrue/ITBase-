# seed_devices.py
import asyncio
import random
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
project_root = Path(__file__).resolve().parent
sys.path.insert(0, str(project_root))

from faker import Faker
from sqlalchemy import select

from app.db.database import AsyncSessionFactory
from app.models import Department, DeviceModel, DeviceStatus, Employee, Location, Tag
from app.schemas.asset import AssetCreate
from app.services.device_service import DeviceService

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
NUMBER_OF_DEVICES = 30  # –°–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–æ–≤ –º—ã —Ö–æ—Ç–∏–º —Å–æ–∑–¥–∞—Ç—å
ADMIN_USER_ID = 1       # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç –∏–º–µ–Ω–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –∞–∫—Ç–∏–≤—ã (–¥–ª—è –ª–æ–≥–∞ –∞—É–¥–∏—Ç–∞)

async def seed_devices():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤."""
    print('--- üèÅ –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ ---')

    # --- 0. –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
    confirm = input(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å {NUMBER_OF_DEVICES} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤? (y/n): ")
    if confirm.lower() != 'y':
        print("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        return


    faker = Faker('ru_RU')

    # --- 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∏–∑ –ë–î –≤ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏ ---
    print('üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
    async with AsyncSessionFactory() as db_for_refs:
        device_models = (await db_for_refs.execute(select(DeviceModel))).scalars().all()
        statuses = (await db_for_refs.execute(select(DeviceStatus))).scalars().all()
        departments = (await db_for_refs.execute(select(Department))).scalars().all()
        locations = (await db_for_refs.execute(select(Location))).scalars().all()
        employees = (await db_for_refs.execute(select(Employee))).scalars().all()
        tags = (await db_for_refs.execute(select(Tag))).scalars().all()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –Ω–µ –ø—É—Å—Ç—ã–µ. –ï—Å–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å init_data.py
    if not all([device_models, statuses, departments, locations, employees]):
        print('\n‚ùå –û–®–ò–ë–ö–ê: –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –ø—É—Å—Ç—ã.')
        print("üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç 'python init_data.py' –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
        return

    print(f'‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ {NUMBER_OF_DEVICES} –∞–∫—Ç–∏–≤–æ–≤...')

    # --- 2. –¶–∏–∫–ª —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤ ---    
    successful_creations = 0
    failed_creations = 0

    print("–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è: ", end="", flush=True)

    for i in range(NUMBER_OF_DEVICES):
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –º–æ–¥–µ–ª—å –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –Ω–µ–π —Ç–∏–ø –∞–∫—Ç–∏–≤–∞
            selected_model = random.choice(device_models)
            selected_status = random.choice(statuses)

            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ö–µ–º—ã AssetCreate
            # ...
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏, –ø–æ–∑–≤–æ–ª—è—è –∏–º –±—ã—Ç—å None
            selected_department = random.choice(departments + [None])
            selected_employee = random.choice(employees + [None])
            selected_tags = []
            if tags:
                num_tags = random.randint(0, 3)
                if num_tags > 0:
                    selected_tags = random.sample(tags, num_tags)

            asset_data = {
                'serial_number': faker.ean(length=13),
                'mac_address': faker.mac_address() if random.random() > 0.5 else None,
                'notes': f'–¢–µ—Å—Ç–æ–≤—ã–π –∞–∫—Ç–∏–≤ ‚Ññ{i+1}. {faker.sentence(nb_words=10)}',
                'asset_type_id': selected_model.asset_type_id,
                'device_model_id': selected_model.id,
                'status_id': selected_status.id,
                # –¢–µ–ø–µ—Ä—å –º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º .id –∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º None
                'department_id': selected_department.id if selected_department else None,
                'location_id': random.choice(locations).id,
                'employee_id': selected_employee.id if selected_employee else None,
                'tag_ids': [tag.id for tag in selected_tags],
            }

            asset_to_create = AssetCreate(**asset_data)

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∏ —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            async with AsyncSessionFactory() as db:
                device_service = DeviceService()
                await device_service.create_device(db, asset_to_create, user_id=ADMIN_USER_ID)
                print(".", end="", flush=True)
                successful_creations += 1

        except Exception as e:
            print("F", end="", flush=True)
            failed_creations += 1

    print("\n\n--- üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---")
    print(f"  - ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {successful_creations}")
    print(f"  - ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å: {failed_creations}")
    print(f"  - üî¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {NUMBER_OF_DEVICES}")
    print("--- üéâ –†–∞–±–æ—Ç–∞ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ---")


if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        loop = None

    if loop and loop.is_running():
        # –ï—Å–ª–∏ —Ü–∏–∫–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ Jupyter), –∏—Å–ø–æ–ª—å–∑—É–µ–º await
        task = loop.create_task(seed_devices())
    else:
        # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª
        asyncio.run(seed_devices())

# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---
