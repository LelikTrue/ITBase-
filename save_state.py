#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
"""
import subprocess
import sys
from datetime import datetime
from pathlib import Path

def run_command(command, check=True):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, check=check)
        return result.stdout.strip(), result.stderr.strip()
    except subprocess.CalledProcessError as e:
        return None, e.stderr

def check_git_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    stdout, stderr = run_command("git status --porcelain", check=False)
    if stderr:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ git —Å—Ç–∞—Ç—É—Å–∞:", stderr)
        return False
    
    if stdout:
        print("üìù –ù–∞–π–¥–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–æ–º–º–∏—Ç–∞:")
        print(stdout)
        return True
    else:
        print("‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞")
        return False

def update_current_state():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª CURRENT_STATE.md —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π"""
    state_file = Path("CURRENT_STATE.md")
    if not state_file.exists():
        print("‚ùå –§–∞–π–ª CURRENT_STATE.md –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        content = state_file.read_text(encoding='utf-8')
        current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –ó–∞–º–µ–Ω—è–µ–º placeholder –¥–∞—Ç—ã
        content = content.replace("$(date)", current_date)
        content = content.replace("**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ**: $(date)", f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ**: {current_date}")
        
        state_file.write_text(content, encoding='utf-8')
        print("‚úÖ –§–∞–π–ª CURRENT_STATE.md –æ–±–Ω–æ–≤–ª–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ CURRENT_STATE.md: {e}")
        return False

def create_commit():
    """–°–æ–∑–¥–∞–µ—Ç git –∫–æ–º–º–∏—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏"""
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    stdout, stderr = run_command("git add .")
    if stderr:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤:", stderr)
        return False
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
    commit_message = f"feat: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ - {datetime.now().strftime('%Y-%m-%d %H:%M')}"
    
    stdout, stderr = run_command(f'git commit -m "{commit_message}"')
    if stderr and "nothing to commit" not in stderr:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–º–∏—Ç–∞:", stderr)
        return False
    
    print(f"‚úÖ –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω: {commit_message}")
    return True

def create_tag():
    """–°–æ–∑–¥–∞–µ—Ç git —Ç–µ–≥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    tag_name = f"working-state-{datetime.now().strftime('%Y%m%d-%H%M')}"
    tag_message = "–†–∞–±–æ—á–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
    
    stdout, stderr = run_command(f'git tag -a {tag_name} -m "{tag_message}"')
    if stderr:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–≥–∞:", stderr)
        return False
    
    print(f"‚úÖ –¢–µ–≥ —Å–æ–∑–¥–∞–Ω: {tag_name}")
    return True

def show_summary():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    print("\n" + "=" * 50)
    print("üìä –°–í–û–î–ö–ê –°–û–•–†–ê–ù–ï–ù–ù–û–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø")
    print("=" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
    stdout, stderr = run_command("git log -1 --oneline")
    if stdout:
        print(f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: {stdout}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–≥–∏
    stdout, stderr = run_command("git tag --sort=-creatordate | head -3")
    if stdout:
        print("üè∑Ô∏è  –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ–≥–∏:")
        for tag in stdout.split('\n'):
            if tag.strip():
                print(f"   - {tag}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–æ–≤
    stdout, stderr = run_command("find . -name '*.py' | wc -l", check=False)
    if stdout:
        print(f"üìÅ Python —Ñ–∞–π–ª–æ–≤: {stdout}")
    
    print("\nüéØ –ß—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:")
    print("   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
    print("   ‚úÖ –°–∫—Ä–∏–ø—Ç—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    print("   ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
    print("   ‚úÖ Makefile —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏")
    print("   ‚úÖ –¢–µ–∫—É—â–µ–µ —Ä–∞–±–æ—á–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ITBase")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    stdout, stderr = run_command("git rev-parse --git-dir", check=False)
    if stderr:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ git:")
        print("   git init")
        print("   git remote add origin <URL>")
        return 1
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if not update_current_state():
        return 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    if not check_git_status():
        print("‚ÑπÔ∏è  –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return 0
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
    if not create_commit():
        return 1
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥
    if "--tag" in sys.argv:
        create_tag()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    show_summary()
    
    print("\nüéâ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   - git push origin main  # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
    print("   - git push --tags       # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–≥–∏")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())